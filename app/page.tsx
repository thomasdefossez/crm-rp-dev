"use client";

import { useState } from 'react';
import { CheckCircle, LoaderCircle, Clock, LogIn, Mail, ShieldCheck, Github, Server } from "lucide-react";

const roadmap = [
  {
    phase: 'PHASE 0',
    titre: 'Setup de base',
    objectif: 'Avoir l‚Äôossature technique pr√™te',
    progress: 100,
    livrables: [
      'Authentification avec Supabase Auth ‚úÖ',
      'Frontend React / Next.js avec Tailwind CSS ‚úÖ',
      'Supabase branch√© en base relationnelle ‚úÖ',
      'Structure projet front-end / back-end ‚úÖ',
    ],
  },
  {
    phase: 'PHASE 1',
    titre: 'Noyau produit',
    objectif: 'G√©rer un compte utilisateur et une base de contacts',
    progress: 40,
    livrables: [
      'Page profil utilisateur üü£',
      'Structure des r√¥les / plans ‚è≥',
      'Connexion UID Supabase <> base utilisateur ‚è≥',
    ],
  },
  {
    phase: 'PHASE 2',
    titre: 'Gestion des contacts RP',
    objectif: 'Cr√©er et g√©rer sa base journalistes',
    progress: 75,
    livrables: [
      'Table contacts ‚úÖ',
      'Formulaire cr√©ation + √©dition ‚úÖ',
      'Import CSV ‚è≥',
      'Tagging / filtre / recherche üü£',
    ],
  },
  {
    phase: 'PHASE 2B',
    titre: 'Gestion des √©v√©nements',
    objectif: 'Organiser et suivre les d√©jeuners presse & √©v√©nements',
    progress: 90,
    livrables: [
      'Cr√©ation √©v√©nements üü£',
      'Invitation de contacts üü£',
      'Suivi des confirmations ‚è≥',
    ],
  },
  {
    phase: 'PHASE 3',
    titre: 'Communiqu√©s de presse',
    objectif: 'R√©diger, envoyer, tracker un communiqu√©',
    progress: 10,
    livrables: [
      '√âditeur WYSIWYG ‚è≥',
      'Choix des contacts √† cibler ‚è≥',
      'Suivi des envois ‚è≥',
      'Email via Resend üü£',
    ],
  },
  {
    phase: 'PHASE 3B',
    titre: 'Campagnes & Mails',
    objectif: 'Pr√©parer, envoyer et suivre des campagnes d‚Äôemailing RP',
    progress: 85,
    livrables: [
      'Cr√©ation de campagnes üü£',
      'Int√©gration Maily ‚úÖ',
      'Envoi des emails avec Resend ‚úÖ',
      'Tracking ouverture / clics ‚è≥',
    ],
  },
  {
    phase: 'PHASE 4',
    titre: 'Mon√©tisation & Abonnements',
    objectif: 'Activer les plans payants et g√©rer le paiement',
    progress: 0,
    livrables: [
      'Int√©gration Stripe checkout ‚è≥',
      'Webhooks user_subscriptions ‚è≥',
      'Page pricing + upgrade/downgrade ‚è≥',
      'Verrouillage fonctions selon plan ‚è≥',
    ],
  },
  {
    phase: 'PHASE 5',
    titre: 'Newsroom publique',
    objectif: 'Cr√©er une page publique de communiqu√©s',
    progress: 0,
    livrables: [
      'Page ‚Äú/newsroom/nom-du-client‚Äù ‚è≥',
      'Liste des communiqu√©s publi√©s ‚è≥',
      'SEO et design simple ‚è≥',
    ],
  },
  {
    phase: 'PHASE 6',
    titre: 'Am√©liorations et IA',
    objectif: 'Ajouter un petit effet ‚Äúwahou‚Äù',
    progress: 0,
    livrables: [
      'R√©sum√© automatique d‚Äôun communiqu√© (GPT) ‚è≥',
      'Suggestion de journalistes ‚è≥',
      'Dashboard statistique ‚è≥',
    ],
  },
  {
    phase: 'PHASE 7',
    titre: 'Gestion des pr√™ts',
    objectif: 'G√©rer l‚Äôenvoi et le retour des produits en pr√™t',
    progress: 0,
    livrables: [
      'Table des pr√™ts ‚è≥',
      'Historique des envois/retours ‚è≥',
      'Suivi des statuts ‚è≥',
    ],
  },
];

const stack = [
  {
    name: "CI/CD",
    tech: "GitHub + GitHub Actions",
    logo: "https://cdn.simpleicons.org/github",
    notes: "Automatisation des tests, builds et d√©ploiements",
  },
  {
    name: "Frontend deployment",
    tech: "Vercel",
    logo: "https://cdn.simpleicons.org/vercel",
    notes: "D√©ploiement du frontend Next.js avec SSR/RSC",
  },
  {
    name: "Reporting",
    tech: "Supabase Studio",
    logo: "https://cdn.simpleicons.org/supabase",
    notes: "Pour du reporting custom sur ta base",
  },
  {
    name: "Stockage fichiers",
    tech: "Supabase Storage",
    logo: "/logos/supabase.svg",
    notes: "Pour stocker les fichiers li√©s aux communiqu√©s (PDF, images)",
  },
  {
    name: "Support client",
    tech: "Crisp",
    logo: "https://cdn.simpleicons.org/crisp",
    notes: "Pour le support client en live chat",
  },
  {
    name: "Monitoring",
    tech: "Sentry",
    logo: "https://cdn.simpleicons.org/sentry",
    notes: "Pour le monitoring des erreurs de l'application",
  },
  {
    name: "Frontend",
    tech: "Next.js",
    logo: "https://cdn.simpleicons.org/nextdotjs",
    notes: "Pages en `/app`, SSR et RSC activ√©s",
  },
  {
    name: "UI",
    tech: "Tailwind CSS",
    logo: "https://cdn.simpleicons.org/tailwindcss",
    notes: "Design inspir√© ShadCN, sans d√©pendance UI",
  },
  {
    name: "Auth",
    tech: "Supabase Auth",
    logo: "/logos/supabase.svg",
    notes: "Emails int√©gr√©s pour login/signup/reset",
  },
  {
    name: "Base de donn√©es",
    tech: "Supabase (PostgreSQL)",
    logo: "https://cdn.simpleicons.org/postgresql",
    notes: "Relationnelle, branch√©e aux utilisateurs",
  },
  {
    name: "Paiement",
    tech: "Stripe",
    logo: "https://cdn.simpleicons.org/stripe",
    notes: "Plans payants avec abonnement & webhooks",
  },
  {
    name: "Emails transactionnels",
    tech: "Resend",
    logo: "https://avatars.githubusercontent.com/u/108968288?s=200&v=4",
    notes: "Pour l‚Äôenvoi de communiqu√©s ‚Äì 3000 mails/mois gratuits",
  },
  {
    name: "Infrastructure",
    tech: "Pulumi + AWS",
    logo: "https://cdn.simpleicons.org/amazonaws",
    notes: "D√©ploiement infra-as-code",
  },
];

export default function Home() {
  return (
      <main className="p-8 bg-background min-h-screen text-foreground">
        <div className="mb-8 flex flex-wrap gap-4">
          <a
            href="/login"
            className="inline-flex items-center px-4 py-2 bg-violet-600 text-white rounded-md font-medium shadow-sm hover:bg-violet-700 transition-colors"
          >
            <LogIn className="h-4 w-4 mr-2" />
            Login Briefly
          </a>
          <a
            href="https://resend.com"
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center px-4 py-2 bg-violet-600 text-white rounded-md font-medium shadow-sm hover:bg-violet-700 transition-colors"
          >
            <Mail className="h-4 w-4 mr-2" />
            Resend Dashboard
          </a>
          <a
            href="https://supabase.com/dashboard/sign-in"
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center px-4 py-2 bg-violet-600 text-white rounded-md font-medium shadow-sm hover:bg-violet-700 transition-colors"
          >
            <ShieldCheck className="h-4 w-4 mr-2" />
            Supabase Dashboard
          </a>
          <a
            href="https://github.com/"
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center px-4 py-2 bg-violet-600 text-white rounded-md font-medium shadow-sm hover:bg-violet-700 transition-colors"
          >
            <Github className="h-4 w-4 mr-2" />
            GitHub
          </a>
          <a
            href="https://vercel.com/"
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center px-4 py-2 bg-violet-600 text-white rounded-md font-medium shadow-sm hover:bg-violet-700 transition-colors"
          >
            <Server className="h-4 w-4 mr-2" />
            Vercel
          </a>
        </div>
        <h1 className="text-3xl font-bold tracking-tight mb-12">
          üöÄ Projet CRM RP ‚Äì Vue d‚Äôensemble
        </h1>

        <div className="mb-12 grid grid-cols-1 lg:grid-cols-2 gap-8">
          <section className="bg-white border rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow">
            <h2 className="text-xl font-semibold mb-6 text-gray-800">üõ†Ô∏è Stack technique</h2>
            <table className="w-full text-left text-sm border border-gray-200 rounded overflow-hidden">
              <thead className="bg-gray-100">
              <tr>
                <th className="p-3 border-b">√âl√©ment</th>
                <th className="p-3 border-b">Technologie</th>
                <th className="p-3 border-b">Notes</th>
              </tr>
              </thead>
              <tbody>
              {stack.map((item, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="p-3 border-b font-medium text-gray-700">{item.name}</td>
                    <td className="p-3 border-b">
                      <div className="flex items-center gap-2">
                        <img src={item.logo} alt={item.tech} className="h-5 w-5" />
                        {item.tech}
                      </div>
                    </td>
                    <td className="p-3 border-b text-gray-600">{item.notes}</td>
                  </tr>
              ))}
              </tbody>
            </table>
          </section>

          <section className="bg-white border rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow">
            <h2 className="text-xl font-semibold mb-6 text-gray-800">üìç Roadmap produit</h2>
            <div className="space-y-6">
              {roadmap.map((phase) => {
                const status =
                    phase.progress === 100 ? 'Termin√©' : phase.progress > 0 ? 'En cours' : '√Ä venir';
                const statusColor =
                    phase.progress === 100
                        ? 'bg-green-100 text-green-800'
                        : phase.progress > 0
                            ? 'bg-purple-100 text-purple-800'
                            : 'bg-gray-100 text-gray-600';
                return (
                    <div key={phase.phase} className="border rounded-lg p-6 bg-white shadow-sm">
                      <div className="flex items-center justify-between mb-4">
                        <div>
                          <p className="text-xs uppercase text-gray-500">{phase.phase}</p>
                          <h3 className="text-lg font-semibold text-gray-800">{phase.titre}</h3>
                        </div>
                        <span className={`text-xs font-semibold px-3 py-1 rounded-full ${statusColor}`}>{status}</span>
                      </div>
                      <p className="text-sm text-gray-600 mb-4 italic">{phase.objectif}</p>
                      <div className="w-full h-2 rounded-full bg-gray-200 overflow-hidden mb-4">
                        <div
                            className="h-full bg-gradient-to-r from-violet-500 to-purple-600 transition-all duration-500"
                            style={{ width: `${phase.progress}%` }}
                        />
                      </div>
                      <ul className="space-y-2">
                        {phase.livrables.map((item, i) => {
                          let Icon;
                          if (item.endsWith('‚úÖ')) Icon = CheckCircle;
                          else if (item.endsWith('üü£')) Icon = LoaderCircle;
                          else Icon = Clock;
                          const label = item.replace(/(‚úÖ|üü£|‚è≥)/, '').trim();
                          return (
                              <li key={i} className="flex items-center gap-3 text-sm text-gray-700">
                                <Icon className="w-4 h-4 text-violet-600" />
                                {label}
                              </li>
                          );
                        })}
                      </ul>
                    </div>
                );
              })}
            </div>
          </section>
        </div>
      </main>
  );
}
